// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // 15th bit of instruction tells whether A or C
    Mux16(a=ALUout, b=instruction, sel=instruction[15], out=Aregin);
    // determine whether to load into A, don't load only if C instruction but d1 == 0
    Not(in=instruction[15], out=not15);
    Or(a=not15, b=instruction[5], out=loadA);
    // takes in aluout OR instruction depending if A or C instruction
    ARegister(in=Aregin, load=loadA, out=regAout);

    And(a=instruction[15], b=instruction[4], out=loadD)
    // load to D based on d2 and if it's a C instruction
    DRegister(in=ALUout, load=loadD, out=regDout);

    // determines from a bit which of registers (A or M) to input as y in computations
    Mux16(a=regAout, b=inM, sel=instruction[13], out=y);

    // determines whether to use data from Dregister from a bit
    Mux16(a=regDout, b=false, sel=instruction[13], out=x);

    ALU(x=x, y=y,
        zx=instruction[11],
        nx=instruction[10],
        zy=instrcution[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=ALUout, out=outM, zr=zero, ng=neg);

    // determine if program needs to jump and use for input to ALU load
    Not(in=zr, out=nonzero);
    Not(in=ng, out=pos);
    And(a=nonzero, b=pos, out=nonzeropos);
    And(a=instruction[0], b=nonzeropos, out=j3);
    And(a=instruction[1], b=zr, out=j2);
    And(a=instruction[2], b=ng, out=j1);
    Or(a=j3, b=j2, out=j3ORj2);
    Or(a=j3ORj2, b=j1, out=jump);

    PC(in=regAout, load=jump, inc=true, reset=reset, out=pc[0..14]);

    // determine where to write output value of ALU by dest
    DMux()
}